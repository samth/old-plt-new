#lang scheme/gui

(require 2htdp/private/image-more)

(define-namespace-anchor anchor)
(define ns (namespace-anchor->namespace anchor))
(define expressions
  (parameterize ([current-namespace ns])
    (putenv "PLTSHOWIMAGES" "show")
    (let-values ([(in out) (make-pipe)])
      (thread
       (λ () 
         (parameterize ([current-output-port out])
           (dynamic-require "image.scrbl" #f))
         (close-output-port out)))
      (let loop ()
        (let ([exp (read in)])
          (if (eof-object? exp)
              '()
              (cons exp (loop))))))))

(define-namespace-anchor image-anchor)
(define image-ns (namespace-anchor->namespace anchor))

(define mapping '())

(define (handle-image exp)
  (let* ([i (length mapping)]
         [fn (format "~a.png" i)])
    (printf "saving ~s\n" exp)
    (set! mapping (cons (list exp fn) mapping))
    (parameterize ([current-namespace image-ns])
      (save-image (eval exp)
                  (build-path "img" fn)))))

(for-each handle-image expressions)
(call-with-output-file "image-toc.ss"
  (λ (port)
    (fprintf port "#lang scheme/base\n(provide mapping)\n")
    (fprintf port ";; this file is generated by image-gen.ss -- do not edit\n\n")
    (pretty-print
     `(define mapping (list ,@(map (λ (l) `(list ',(car l) ,(cadr l))) mapping)))
     port))
  #:exists 'truncate)
