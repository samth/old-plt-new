#f line #f col #f - make-sequence - in-list
#f line #f col #f - (let-values (((pos->vals pos-next init pos-cont? val-cont? all-cont?) (#%app make-sequence (quote (i)) (quote (1.0+2.0i 2.0+4.0i))))) (#%app void) (#%app (letrec-values (((for-loop) (lambda (sum pos) (if (#%app pos-cont? pos) (let-values (((i) (#%app pos->vals pos))) (if (#%app val-cont? i) (let-values (((sum) (let-values (((sum) sum)) (let-values () (#%app + i sum))))) (if (#%app all-cont? pos i) (#%app for-loop sum (#%app pos-next pos)) sum)) sum)) sum)))) for-loop) (quote 0.0+0.0i) init)) - unboxed let bindings
unboxed-for.rkt line 8 col 7 - + - unboxed binary inexact complex
unboxed-for.rkt line 8 col 6 - (#%app + i sum) - unboxed inexact complex
unboxed-for.rkt line 8 col 7 - + - unboxed binary inexact complex
unboxed-for.rkt line 8 col 6 - (#%app + i sum) - unboxed inexact complex
unboxed-for.rkt line 6 col 31 - sum - unboxed complex variable 
unboxed-for.rkt line 8 col 7 - + - unboxed binary inexact complex
unboxed-for.rkt line 8 col 6 - (#%app + i sum) - unboxed inexact complex
#f line #f col #f - (let-values (((i) (#%app pos->vals pos))) (if (#%app val-cont? i) (let-values (((sum) (let-values (((sum) sum)) (let-values () (#%app + i sum))))) (if (#%app all-cont? pos i) (#%app for-loop sum (#%app pos-next pos)) sum)) sum)) - unboxed let bindings
unboxed-for.rkt line 7 col 13 - i - unboxed complex variable 
unboxed-for.rkt line 7 col 13 - i - unboxed complex variable 
unboxed-for.rkt line 8 col 7 - + - unboxed binary inexact complex
unboxed-for.rkt line 8 col 6 - (#%app + i sum) - unboxed inexact complex
#f line #f col #f - (let-values (((sum) sum)) (let-values () (#%app + i sum))) - unboxed let bindings
#f line #f col #f - (let-values () (#%app + i sum)) - unboxed let bindings
unboxed-for.rkt line 8 col 7 - + - unboxed binary inexact complex
unboxed-for.rkt line 8 col 6 - (#%app + i sum) - unboxed inexact complex
#f line #f col #f - (let-values (((sum) (let-values (((sum) sum)) (let-values () (#%app + i sum))))) (if (#%app all-cont? pos i) (#%app for-loop sum (#%app pos-next pos)) sum)) - unboxed let bindings
unboxed-for.rkt line 7 col 13 - i - unboxed complex variable 
#f line #f col #f - for-loop - unboxed call site
unboxed-for.rkt line 6 col 31 - sum - unboxed complex variable 
unboxed-for.rkt line 6 col 31 - sum - unboxed complex variable 
unboxed-for.rkt line 6 col 0 - (letrec-values (((for-loop) (lambda (sum pos) (if (#%app pos-cont? pos) (let-values (((i) (#%app pos->vals pos))) (if (#%app val-cont? i) (let-values (((sum) (let-values (((sum) sum)) (let-values () (#%app + i sum))))) (if (#%app all-cont? pos i) (#%app for-loop sum (#%app pos-next pos)) sum)) sum)) sum)))) for-loop) - unboxed let bindings
unboxed-for.rkt line 6 col 0 - (letrec-values (((for-loop) (lambda (sum pos) (if (#%app pos-cont? pos) (let-values (((i) (#%app pos->vals pos))) (if (#%app val-cont? i) (let-values (((sum) (let-values (((sum) sum)) (let-values () (#%app + i sum))))) (if (#%app all-cont? pos i) (#%app for-loop sum (#%app pos-next pos)) sum)) sum)) sum)))) for-loop) - unboxed call site
3.0+6.0i
