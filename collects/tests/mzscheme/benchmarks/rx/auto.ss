
(module mz mzscheme
  (define (test input rx iterations)
    (printf "Testing ~s on ~a iterations of a ~a-byte input\n" rx
	    iterations
	    (bytes-length input))
    (time
     (let loop ([n iterations])
       (unless (zero? n)
	 (regexp-match-positions rx input)
	 (loop (sub1 n))))))

  (define (random-letters n)
    (let loop ([n n][accum null])
      (if (zero? n)
	  (list->bytes accum)
	  (loop (sub1 n) (cons (+ (char->integer #\a)
				  (random 26))
			       accum)))))

  (test (make-bytes 100 (char->integer #\x))  #px#"(?s:.*)" 100000)
  (test (make-bytes 1000 (char->integer #\x))  #px#"(?s:.*)" 100000)
  (test (make-bytes 10000 (char->integer #\x))  #px#"(?s:.*)" 10000)
  (test (make-bytes 100000 (char->integer #\x))  #px#"(?s:.*)" 1000)
  (test (make-bytes 100 (char->integer #\x))  #px#".*" 100000)
  (test (make-bytes 1000 (char->integer #\x))  #px#".*" 100000)
  (test (make-bytes 10000 (char->integer #\x))  #px#".*" 100000)
  (test (make-bytes 100000 (char->integer #\x))  #px#".*" 10000)
  (test (make-bytes 100 (char->integer #\x))  #px#"(?s:(.)*)" 100000)
  (test (make-bytes 1000 (char->integer #\x))  #px#"(?s:(.)*)" 100000)
  (test (make-bytes 10000 (char->integer #\x))  #px#"(?s:(.)*)" 10000)
  (test (make-bytes 100000 (char->integer #\x))  #px#"(?s:(.)*)" 1000)
  (test (make-bytes 100 (char->integer #\x))  #px#"x*" 100000)
  (test (make-bytes 1000 (char->integer #\x))  #px#"x*" 100000)
  (test (make-bytes 10000 (char->integer #\x))  #px#"x*" 10000)
  (test (make-bytes 100000 (char->integer #\x))  #px#"x*" 1000)
  (test (make-bytes 100 (char->integer #\x))  #px#"[xy]*" 100000)
  (test (make-bytes 1000 (char->integer #\x))  #px#"[xy]*" 10000)
  (test (make-bytes 10000 (char->integer #\x))  #px#"[xy]*" 1000)
  (test (make-bytes 100000 (char->integer #\x))  #px#"[xy]*" 100)
  (test (make-bytes 100 (char->integer #\x))  #px#"(.)*" 100000)
  (test (make-bytes 1000 (char->integer #\x))  #px#"(.)*" 100000)
  (test (make-bytes 10000 (char->integer #\x))  #px#"(.)*" 100000)
  (test (make-bytes 100000 (char->integer #\x))  #px#"(.)*" 10000)
  (test (make-bytes 100 (char->integer #\x))  #px#"(x)*" 100000)
  (test (make-bytes 1000 (char->integer #\x))  #px#"(x)*" 100000)
  (test (make-bytes 10000 (char->integer #\x))  #px#"(x)*" 10000)
  (test (make-bytes 100000 (char->integer #\x))  #px#"(x)*" 1000)
  (test (make-bytes 100 (char->integer #\x))  #px#"(y|x)*" 10000)
  (test (make-bytes 1000 (char->integer #\x))  #px#"(y|x)*" 1000)
  (test (make-bytes 10000 (char->integer #\x))  #px#"(y|x)*" 100)
  (test (make-bytes 100000 (char->integer #\x))  #px#"(y|x)*" 10)
  (test (make-bytes 100 (char->integer #\x))  #px#"([yz]|x)*" 10000)
  (test (make-bytes 1000 (char->integer #\x))  #px#"([yz]|x)*" 1000)
  (test (make-bytes 10000 (char->integer #\x))  #px#"([yz]|x)*" 100)
  (test (make-bytes 100000 (char->integer #\x))  #px#"([yz]|x)*" 10)
  (test (make-bytes 100 (char->integer #\x))  #px#"([xy])*" 100000)
  (test (make-bytes 1000 (char->integer #\x))  #px#"([xy])*" 10000)
  (test (make-bytes 10000 (char->integer #\x))  #px#"([xy])*" 1000)
  (test (make-bytes 100000 (char->integer #\x))  #px#"([xy])*" 100)
;  (test (make-bytes 100 (char->integer #\x))  #px#"((x){2})*" 10000)
;  (test (make-bytes 1000 (char->integer #\x))  #px#"((x){2})*" 10000)
;  (test (make-bytes 10000 (char->integer #\x))  #px#"((x){2})*" 1000)
;  (test (make-bytes 100000 (char->integer #\x))  #px#"((x){2})*" 100000)
  (test (bytes-append (random-letters 100) #"FOOBARBAZ")  #px#"[a-z]*FOOBARBAZ" 100000)
  (test (bytes-append (random-letters 1000) #"FOOBARBAZ")  #px#"[a-z]*FOOBARBAZ" 10000)
  (test (bytes-append (random-letters 10000) #"FOOBARBAZ")  #px#"[a-z]*FOOBARBAZ" 1000)
  (test (bytes-append (random-letters 100) #"NOPE")  #px#"[a-z]*FOOBARBAZ" 1000000)
  (test (bytes-append (random-letters 1000) #"NOPE")  #px#"[a-z]*FOOBARBAZ" 100000)
  (test (bytes-append (random-letters 10000) #"NOPE")  #px#"[a-z]*FOOBARBAZ" 10000)
  (test (bytes-append (random-letters 100) #"FOOBARBAZ")  #px#"([a-z])*FOOBARBAZ" 100000)
  (test (bytes-append (random-letters 1000) #"FOOBARBAZ")  #px#"([a-z])*FOOBARBAZ" 10000)
  (test (bytes-append (random-letters 10000) #"FOOBARBAZ")  #px#"([a-z])*FOOBARBAZ" 1000)
  (test (bytes-append (random-letters 100) #"NOPE")  #px#"([a-z])*FOOBARBAZ" 1000000)
  (test (bytes-append (random-letters 1000) #"NOPE")  #px#"([a-z])*FOOBARBAZ" 100000)
  (test (bytes-append (random-letters 10000) #"NOPE")  #px#"([a-z])*FOOBARBAZ" 10000)
  (test (bytes-append (random-letters 100) #"FOOBARBAZ")  #px#"([a-z]|ab)*FOOBARBAZ" 10000)
  (test (bytes-append (random-letters 1000) #"FOOBARBAZ")  #px#"([a-z]|ab)*FOOBARBAZ" 1000)
  (test (bytes-append (random-letters 10000) #"FOOBARBAZ")  #px#"([a-z]|ab)*FOOBARBAZ" 10)
  (test (bytes-append (random-letters 100) #"NOPE")  #px#"([a-z]|ab)*FOOBARBAZ" 1000000)
  (test (bytes-append (random-letters 1000) #"NOPE")  #px#"([a-z]|ab)*FOOBARBAZ" 100000)
  (test (bytes-append (random-letters 10000) #"NOPE")  #px#"([a-z]|ab)*FOOBARBAZ" 10000)
  (test (bytes-append (random-letters 100) #"NOPE")  #px#"(?i:[a-z]*FOOBARBAZ)" 1000)
  (test (bytes-append (random-letters 1000) #"NOPE")  #px#"(?i:[a-z]*FOOBARBAZ)" 10)
  (test (bytes-append (random-letters 10000) #"NOPE")  #px#"(?i:[a-z]*FOOBARBAZ)" 10)
  )